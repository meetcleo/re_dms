---
# tasks file for cloudwatch

# this entire next task is a hack to get the following
# cwa_conf_json_file_content_variable: "{{ lookup('file', 'example_cloudwatch.json') | from_json }}"
# this is needed because when you include_role below, variables are executed in the child roles
# context. if something from the included role references this variable within a `vars/something.yml`
# file it will then have an incorrect file searchpath, so lookup returns None
# which messes the included role up.
- name: read_config_file
  local_action:
    module: ansible.builtin.shell
    _raw_params: "/bin/cat {{ role_path }}/files/example_cloudwatch.json"
  register: cwa_conf_json_file_content_variable
  become: false
  run_once: true

# - name: debug
#   debug:
#     msg: "{{ cwa_conf_json_file_content_variable.stdout }}"
#   tags: debug

- name: Add the user cwauser and add them to the group adm to allow them to read syslog
  user:
    name: cwagent
    comment: CloudWatchAgent
    group: adm

- name: setup re_dms log group
  local_action:
    module: community.aws.cloudwatchlogs_log_group
    log_group_name: re_dms
    retention: 14
  become: false
  tags: log-group

- name: create credentials directory
  ansible.builtin.file:
    path: /home/cwagent/.aws
    state: directory
  tags: copy-credentials

- name: copy cloudwatch credentials to server
  ansible.builtin.template:
    src: credentials_template.j2
    dest: /home/cwagent/.aws/credentials
    owner: cwagent
    mode: '0600'
  tags: copy-credentials

# this will install the cloudwatch agent, but not start anything.
- name: install and configure amazon cloudwatch agent
  include_role:
    name: christiangda.amazon_cloudwatch_agent
  vars:
    cwa_conf_json_file_content: "{{ cwa_conf_json_file_content_variable.stdout }}"
    cwa_agent_mode: "ec2"
  tags: install-agent

# note logs: tail /opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log

- name: start systemd service
  ansible.builtin.systemd:
    name: amazon-cloudwatch-agent
    state: restarted
    enabled: yes
    daemon_reload: yes

- name: set custom cron metric reporting to statsd
  ansible.builtin.cron:
    name: 'check number of wal files.'
    minute: '*' # these are defaults but explicitly every minute
    hour: '*'
    weekday: '*'
    user: 're_dms'
    # calculate number of wal files
    # pipefail to exit early
    # echo as a guage to netcat, and send to default statsd collection agent.
    job: >-
      set -euo pipefail
      number_of_wal_files=$(ls /re_dms/output_wal/*.wal | wc -l)
      echo "number_of_wal_files:$number_of_wal_files|g" | nc -u -w0 127.0.0.1 8125
      number_of_processes_owned_by_re_dms=$(ps -u re_dms --no-headers | wc -l)
      echo "number_of_processes_owned_by_re_dms:$number_of_processes_owned_by_re_dms|g" | nc -u -w0 127.0.0.1 8125
      number_of_re_dms_processes_running=$(ps -C re_dms --no-headers | wc -l)
      echo "number_of_re_dms_processes_running:$number_of_re_dms_processes_running|g" | nc -u -w0 127.0.0.1 8125
      # date at which the oldest wal file was last modified in epoch seconds
      then_old=$(ls /re_dms/output_wal/*.wal -tr | head -n 1 | xargs stat -c '%Y')
      # date at which the most recent wal file was last modified in epoch seconds
      then_new=$(ls /re_dms/output_wal/*.wal -tr | head -n 1 | xargs stat -c '%Y')
      # now epoch seconds
      now=$(date +%s)
      # oldest file created seconds ago
      old_seconds_ago=$(($then_old-$now))
      # oldest file created seconds ago
      newest_seconds_ago=$(($then_new-$now))
      echo "seconds_since_oldest_wal_file_modified:$old_seconds_ago|g" | nc -u -w0 127.0.0.1 8125
      echo "seconds_since_newest_wal_file_modified:$newest_seconds_ago|g" | nc -u -w0 127.0.0.1 8125
      

